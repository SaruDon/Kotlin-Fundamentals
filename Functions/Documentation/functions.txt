1)functions can be stored inside variable


        fun main() {
            val trickFunction = ::trick
        }

        fun trick() {
            println("No treats!")
        }


2)Lambda expressions


    fun main() {
        val trickFunction = trick
        trick()
        trickFunction()
    }

    val trick = {
        println("No treats!")
    }

    i) Use functions as dataTypes in lambda functions 
        val treat: () -> Unit = {
            println("Have a treat!")
        }

    ii)For eg
        fun trickOrTreat(isTrick: Boolean): () -> Unit {
            if (isTrick) {
                return trick
            } else {
                return treat
            }
        }


3)Pass a function to another function as an argument

    fun trickOrTreat(isTrick: Boolean, extraTreat: (Int) -> String): () -> Unit {
        if (isTrick) {
            return trick
        } else {
            println(extraTreat(5))
            return treat
        }
    }

4)Nullable function types
Like other data types, function types can be declared as nullable. In these cases,
 a variable could contain a function or it could be null.    

    fun trickOrTreat(isTrick: Boolean, extraTreat: ((Int) -> String)?): () -> Unit {
        if (isTrick) {
            return trick
        } else {
            if (extraTreat != null) {
                println(extraTreat(5))
            }
            return treat
        }
    }

5)Pass a lambda expression directly into a function
        
        fun main() {
            val coins: (Int) -> String = {
                "$it quarters"
            }
            val treatFunction = trickOrTreat(false, { "$it quarters" })
            val trickFunction = trickOrTreat(true, null)
            treatFunction()
            trickFunction()
        } 

6)Use trailing lambda syntax

val treatFunction = trickOrTreat(false) { "$it quarters" }


7) repeat fun

    fun main() {
        val treatFunction = trickOrTreat(false) { "$it quarters" }
        val trickFunction = trickOrTreat(true, null)
        repeat(4) {
            treatFunction()
        }
        trickFunction()
    }